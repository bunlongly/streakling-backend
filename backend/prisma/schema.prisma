generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum CardStatus {
  STUDENT
  GRADUATE
  WORKING
}

enum PublishStatus {
  DRAFT
  PRIVATE
  PUBLISHED
}

enum SocialPlatform {
  TWITTER
  INSTAGRAM
  FACEBOOK
  LINKEDIN
  TIKTOK
  YOUTUBE
  GITHUB
  PERSONAL
  OTHER
}

model User {
  id            String            @id @default(cuid())
  clerkId       String            @unique
  username      String?           @unique
  email         String?           @unique
  displayName   String
  // Avatar upload uses the same signer flow as your other features
  avatarKey     String?
  avatarUrl     String?
  bannerKey     String?

  country       String?
  religion      String?
  dateOfBirth   DateTime?
  phone         String?

  // field-level privacy toggles (false = private by default)
  showEmail         Boolean       @default(false)
  showReligion      Boolean       @default(false)
  showDateOfBirth   Boolean       @default(false)
  showPhone         Boolean       @default(false)
  showCountry       Boolean       @default(true)

  // industries/categories (many-to-many)
  industries     UserIndustry[]

  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  digitalCards  DigitalNameCard[]
  portfolios    Portfolio[]
}

model Industry {
  id        String          @id @default(cuid())
  slug      String          @unique
  name      String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  users     UserIndustry[]
}

model UserIndustry {
  userId     String
  industryId String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  industry   Industry @relation(fields: [industryId], references: [id], onDelete: Cascade)

  @@id([userId, industryId])
  @@index([industryId])
}


model DigitalNameCard {
  id             String         @id @default(cuid())
  userId         String
  slug           String
  firstName      String
  lastName       String
  appName        String
  status         CardStatus
  role           String
  shortBio       String
  company        String?
  university     String?
  country        String?
  religion       String?
  phone          String?

  showPhone      Boolean        @default(false)
  showReligion   Boolean        @default(false)
  showCompany    Boolean        @default(true)
  showUniversity Boolean        @default(true)
  showCountry    Boolean        @default(true)

  avatarKey      String?
  bannerKey      String?
  publishStatus  PublishStatus  @default(DRAFT)
  publishedAt    DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  user           User           @relation(fields: [userId], references: [id])

  socials        SocialAccount[]
  portfoliosImported Portfolio[] @relation("PortfolioSourceCard")
  @@unique([userId, slug])
  @@unique([slug])
  @@index([publishStatus, publishedAt])
  @@index([appName])
}

model SocialAccount {
  id        String          @id @default(cuid())
  cardId    String
  platform  SocialPlatform
  handle    String?
  url       String?
  label     String?
  isPublic  Boolean         @default(true)
  sortOrder Int             @default(0)

  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  card      DigitalNameCard @relation(fields: [cardId], references: [id])

  @@index([cardId, isPublic, sortOrder])
}



model Portfolio {
  id             String           @id @default(cuid())
  userId         String

  slug           String

  title          String
  description    String?
  mainImageKey   String?
  tags           Json?


  about          Json?

  publishStatus  PublishStatus  @default(DRAFT)
  publishedAt    DateTime?

  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  sourceCardId        String?
  sourceCardSnapshot  Json?
  sourceCard          DigitalNameCard? @relation("PortfolioSourceCard", fields: [sourceCardId], references: [id], onDelete: SetNull)


  user           User           @relation(fields: [userId], references: [id])

  subImages      PortfolioImage[]
  videoLinks     PortfolioVideo[]
  projects       PortfolioProject[]
  experiences    PortfolioExperience[]
  educations     PortfolioEducation[]

  @@unique([userId, slug])
  @@unique([slug])
  @@index([userId, createdAt])
  @@index([publishStatus, publishedAt])
}

model PortfolioImage {
  id           String     @id @default(cuid())
  portfolioId  String
  key          String
  url          String
  sortOrder    Int        @default(0)

  portfolio    Portfolio  @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@index([portfolioId, sortOrder])
}

model PortfolioVideo {
  id           String          @id @default(cuid())
  portfolioId  String
  platform     SocialPlatform
  url          String
  description  String?

  portfolio    Portfolio       @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@index([portfolioId, platform])
}

model PortfolioProject {
  id             String                 @id @default(cuid())
  portfolioId    String
  title          String
  description    String?
  mainImageKey   String?
  tags           Json?
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt

  portfolio      Portfolio              @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  subImages      PortfolioProjectImage[]
  videoLinks     PortfolioProjectVideo[]

  @@index([portfolioId, createdAt])
}

model PortfolioProjectImage {
  id          String              @id @default(cuid())
  projectId   String
  key         String
  url         String
  sortOrder   Int                 @default(0)

  project     PortfolioProject    @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId, sortOrder])
}

model PortfolioProjectVideo {
  id          String              @id @default(cuid())
  projectId   String
  platform    SocialPlatform
  url         String
  description String?

  project     PortfolioProject    @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId, platform])
}



model PortfolioExperience {
  id           String     @id @default(cuid())
  portfolioId  String
  company      String
  role         String
  location     String?
  startDate    DateTime?
  endDate      DateTime?
  current      Boolean    @default(false)
  summary      String?

  portfolio    Portfolio  @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@index([portfolioId, startDate])
}

model PortfolioEducation {
  id           String     @id @default(cuid())
  portfolioId  String
  school       String
  degree       String?
  field        String?
  startDate    DateTime?
  endDate      DateTime?
  summary      String?

  portfolio    Portfolio  @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@index([portfolioId, startDate])
}
