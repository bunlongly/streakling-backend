// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"              
  url      = env("DATABASE_URL")   
}

enum CardStatus {
  STUDENT
  GRADUATE
  WORKING
}

enum PublishStatus {
  DRAFT
  PRIVATE
  PUBLISHED
}

enum SocialPlatform {
  TWITTER
  INSTAGRAM
  FACEBOOK
  LINKEDIN
  TIKTOK
  YOUTUBE
  GITHUB
  PERSONAL
  OTHER
}

model User {
  id            String            @id @default(cuid())
  clerkId       String            @unique
  username      String?           @unique
  email         String?           @unique
  displayName   String
  avatarUrl     String?
  country       String?
  religion      String?
  phone         String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  digitalCards  DigitalNameCard[]
  portfolios    Portfolio[] 
}

model DigitalNameCard {
  id            String         @id @default(cuid())
  userId        String
  slug          String         // vanity slug (globally unique)
  firstName     String
  lastName      String
  appName       String
  status        CardStatus
  role          String
  shortBio      String
  company       String?
  university    String?
  country       String?
  religion      String?        // sensitive
  phone         String?        // sensitive

  // per-field visibility
  showPhone     Boolean        @default(false)
  showReligion  Boolean        @default(false)
  showCompany   Boolean        @default(true)
  showUniversity Boolean       @default(true)
  showCountry   Boolean        @default(true)

  avatarKey     String?
  bannerKey     String?
  publishStatus PublishStatus  @default(DRAFT)
  publishedAt   DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  user          User           @relation(fields: [userId], references: [id])

  socials        SocialAccount[]

  @@unique([userId, slug])

  // add global vanity slug unique
  @@unique([slug])

  @@index([publishStatus, publishedAt])
  @@index([appName])

}



model SocialAccount {
  id        String          @id @default(cuid())
  cardId    String
  platform  SocialPlatform
  handle    String?         // e.g. @bunlong
  url       String?         // full URL
  label     String?         // custom label for OTHER/ PERSONAL etc.
  isPublic  Boolean         @default(true)
  sortOrder Int             @default(0)

  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  card      DigitalNameCard @relation(fields: [cardId], references: [id])

  @@index([cardId, isPublic, sortOrder])
}



model Portfolio {
  id            String           @id @default(cuid())
  userId        String
  title         String
  description   String?
  mainImageKey  String?
  tags          Json?   
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  user          User             @relation(fields: [userId], references: [id])
  subImages     PortfolioImage[]
  videoLinks    PortfolioVideo[]

  @@index([userId, createdAt])
}

model PortfolioImage {
  id           String     @id @default(cuid())
  portfolioId  String
  key          String     // S3 key
  url          String     // public URL (CF/S3)
  sortOrder    Int        @default(0)

  portfolio    Portfolio  @relation(fields: [portfolioId], references: [id])

  @@index([portfolioId, sortOrder])
}

model PortfolioVideo {
  id               String          @id @default(cuid())
  portfolioId      String
  platform         SocialPlatform  // reuse existing enum
  url              String          // TikTok/YouTube/other link
  durationSeconds  Int?            // we’ll validate ≤ 180 in app layer
  thumbnailUrl     String?         // optional cached thumb

  portfolio        Portfolio       @relation(fields: [portfolioId], references: [id])

  @@index([portfolioId, platform])
}